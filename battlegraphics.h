/* * File: battlegraphics.h * Last modified on Mon April 24 23:00:00 1995 by jzelenski * ----------------------------------------------------- * Defines a set of drawing routines to support the graphics for the  * Battleship game.  Includes functions to draw the starting grid and mark  * cells as hit, missed, or sunk.  Another function will allow the user to  * click on a cell and return the coordinates.  The last two functions will  * draw the current score statistics and display a general printf-style * message on the graphics window. */#ifndef _battlegraph_h#define _battlegraph_h#include "genlib.h"/* * Constants * -------------- * NUM_ROWS and NUM_COLS identify the size of the board that will be drawn * NUM_ROWS should not be changed to something larger than 26 (it uses the * alphabet to identify the rows). */#define NUM_ROWS 10#define NUM_COLS 15#define BLACK 1#define WHITE 0#define BOX_COLOR BLACK  //  background color/* * Type coord * -------------- * The coord struct type is used to identify a location on the board by * its row-column position.  Both rows and columns are integer indexed * starting from zero at the upper-left corner. */typedef struct {	int row, col;} coord;// Two functions I neededvoid DrawBox(double upperLeftX, double upperLeftY, double width, double height);void DrawFilledBox(double lowerLeftX, double lowerLeftY, double width, double height, double fill);/* * Function: DrawStartingBoard * Usage: DrawStartingBoard(); * -------------------------- * Draws a grid of size NUM_ROWS by NUM_COLS in the left side of the graphics * window.  Labels the columns with numbers, starting from zero, and the rows * with letters, starting from 'A'.  All cells are drawn initially empty. */void DrawStartingBoard(void);/* * Function: MarkMiss * Usage: MarkMiss(location); * ---------------------------- * Marks the cell identified by the location coord with the 'X' that  * represents a miss. Al misses are drawn in black.  If the location is out  * of bounds for the board, an error message is printed and program quits. */void MarkMiss(coord location);/* * Function: MarkHit * Usage: MarkHit(location, "Magenta"); * ---------------------------- * Marks the cell identified by the location coord with a filled diamond that * represents a hit. The diamond is filled with the color specified by the  * second parameter.  If the location is out of bounds for the board, an  * error message is generated and the program quits. */void MarkHit(coord location, string color);/* * Function: MarkLineAsSunk * Usage: MarkLineAsSunk(start, end, "Green"); * ---------------------------- * Marks the cells between start and end location (inclusive) with the dimmed * diamond that represents a sunk ship. The diamond is filled with the color  * specified by the second parameter.  It assumes the start and end are  * either in a horizontal or vertical line.  The start location must be  * "less" than the end location (ie either the row or col is smaller for  * start location than end location, depending on the orientation of the  * line.)  If any of the locations between start and end are out of bounds  * for the board, an error message is generated and the program quits. */void MarkLineAsSunk(coord start, coord end, string color);/* * Function: GetLocationChosenByUser * Usage: location = GetLocationChosenByUser(); * ---------------------------- * The function will wait until the user clicks the mouse somewhere in the  * graphics window and will return the coordinates of the cell that was  * clicked by the user.  The function returns the coordinates {-1, -1} if  * the mouse click was not on a valid board cell.  You may need to click and  * briefly hold the mouse for this function to properly register the mouse  * click, because sometimes this function can miss a mouse-click if is  * happens too fast. (It will ignore it and keep waiting for another click). */coord GetLocationChosenByUser(void);/* * Function: DrawScore * Usage: DrawScore(10, 5, .35); * ---------------------------- * Takes three score statistics:  the number of missiles remaining, the  * number of ships yet to sink, and the current hit rate (a double value  * which should express a percentage between 0 and 1).  This function will  * neatly arrange and draw these results in the right-hand side of the  * graphics window. */void DrawScore(int missilesLeft, int shipsLeft, double accuracy);/* * Function: DrawPrintfMessage * Usage: DrawPrintfMessage("You have %d %s remaining", 5, "missiles"); * ---------------------------- * This function has semantics just like printf-you supply the printf-style  * format string including % directives and matching arguments.  It will * appropriately include the formatted information to construct the message  * string.  Instead of writing the message into the text window as printf  * does, it will write the message at the bottom of the graphics window,  * erasing any previous message.  The message is assumed to be one line long * (i.e. the string should not contain any new-lines!) */void DrawPrintfMessage(string format,...);#endif